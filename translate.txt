Ельфи і гноми
Прочитайте інструкцію перед початком.
Уявіть, що ви почали розробляти свій метавсесвіт. У вашому всесвіті
 всі гравці поділяються на дві раси - Elvesі Dwarves. Обидві раси
  діляться на дві групи. Для ельфів це класи ElfRangerі Druid.
   У гномів є DwarfWarriorі DwarfBlacksmithкласи.

Таким чином, кожен гравець повинен бути екземпляром одного з цих
 чотирьох класів. Але щоб мати кращий дизайн коду, ви повинні
 реалізувати абстрактні класи та Elf, де ви можете розмістити
 загальну логіку.DwarfPlayer

Базовим класом повинен бути Playerклас, який повинен мати
єдиний nicknameатрибут, де буде зберігатися ім'я гравця.
Він також повинен мати два оголошених порожніх абстрактних
методу get_rating, player_infoтому ми гарантуємо, що всі гравці
 нашого всесвіту матимуть їх визначені.

Два класи Elfі Dwarfповинні бути успадковані від Player.
Усі ельфи люблять грати пісні, тому Elfконструктор повинен
взяти додатковий аргумент musical_instrumentі зберегти його в
атрибуті protected . Крім того, він повинен мати
 метод play_elf_song, який повинен друкувати такий
 рядок: "{nickname} is playing a song on the {musical_instrument}"

Всі гноми люблять смачну їжу, тому Dwarfконструктор повинен взяти
 додатковий аргумент favourite_dish- і зберегти його в захищеному
  атрибуті. Крім того, він повинен мати метод eat_favourite_dish,
   який повинен друкувати такий
   рядок: "{nickname} is eating {favourite_dish}"

Нарешті, створіть чотири
класи : ElfRanger, Druidі DwarfWarrior.DwarfBlacksmith

ElfRangerмає бути нащадком Elf. Його конструктор повинен прийняти
 один додатковий параметр: bow_level- ціле число, яке показує
 якість лука. Конструктор повинен зберігати його в
 атрибуті protected.

Druidмає бути нащадком Elf. Його конструктор повинен прийняти
один додатковий параметр: favourite_spell- текст улюбленого
заклинання. Конструктор повинен зберігати його в
атрибуті protected.

DwarfWarriorмає бути нащадком Dwarf. Його конструктор повинен
приймати один додатковий параметр: hummer_level- ціле число,
 що показує потужність молотка. Конструктор повинен зберігати
  його в атрибуті protected.

DwarfBlacksmithмає бути нащадком Dwarf. Його конструктор повинен
 прийняти один додатковий параметр: skill_level- ціле число,
 що показує рівень ковальської майстерності. Конструктор повинен
 зберігати його в атрибуті protected.

Усі ці класи повинні мати реалізації player_infoта get_rating методи.

player_infoметод повинен повернути:

"Elf ranger {nickname}. {nickname} has bow of the {bow_level} level"для ElfRangerприкладів
"Druid {nickname}. {nickname} has a favourite spell: {favourite_spell}"для Druidприкладів
"Dwarf warrior {nickname}. {nickname} has a hummer of the {hummer_level} level"для DwarfWarriorприкладів
"Dwarf blacksmith {nickname} with skill of the {skill_level} level"для DwarfBlacksmithприкладів
get_ratingметод повинен повернути:

3 * bow_levelдляElfRanger
довжина favourite_spellдляDruid
hummer_level+ 4 заDwarfWarrior
skill_levelдляDwarfBlacksmith
ranger = ElfRanger(
    nickname="Nardual Chaekian",
    musical_instrument="flute",
    bow_level=7
)
ranger.get_rating() == 21
ranger.player_info() == "Elf ranger Nardual Chaekian. Nardual Chaekian has bow of the 7 level"
ranger.play_elf_song()  # "Nardual Chaekian is playing a song on the flute"
warrior = DwarfWarrior(
    nickname="Thiddeal",
    favourite_dish="French Fries",
    hummer_level=7
)
warrior.get_rating() == 11
warrior.player_info() == "Dwarf warrior Thiddeal. Thiddeal has a hummer of the 7 level"
warrior.eat_favourite_dish()  # "Thiddeal is eating French Fries"
Напишіть такі функції:

calculate_team_total_rating- він повинен отримати список Players
і повернути суму рейтингів для всіх членів команди
team = [
    Druid(nickname="Druid", musical_instrument="flute", favourite_spell="ABC"),
    ElfRanger(nickname="Ranger", musical_instrument="trumpet", bow_level=33),
]
calculate_team_total_rating(team) == 102  # 33 * 3 + 3
elves_concert- він повинен приймати список Elf
і play_elf_songметод виклику для кожного ельфа.
elves = [
    Druid(nickname="Nardual", musical_instrument="flute", favourite_spell="aaa"),
    ElfRanger(nickname="Rothilion", musical_instrument="trumpet", bow_level=33),
]
elves_concert(elves)
# "Nardual is playing a song on the flute"
# "Rothilion is playing a song on the trumpet"
feast_of_the_dwarves- для кожного гнома має бути список Dwarf
і метод виклику eat_favourite_dish.
dwarves = [
    DwarfWarrior(nickname="Thiddeal", favourite_dish="French Fries", hummer_level=3),
    DwarfWarrior(nickname="Dwarf", favourite_dish="Caesar Salad", hummer_level=3),
]
feast_of_the_dwarves(dwarves)
# "Thiddeal is eating French Fries"
# "Dwarf is eating Caesar Salad"
Використовуйте таку структуру проекту:

app/
    main.py
    players/
        player.py
        elves/
            elf.py
            elf_ranger.py
            druid.py
        dwarves/
            dwarf.py
            dwarf_warrior.py
            dwarf_blacksmith.py
Усі класи мають бути визначені у відповідних модулях.
Функції повинні бути визначені в main.pyмодулі.